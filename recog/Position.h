// Generated by gencpp from file recog/Position.msg
// DO NOT EDIT!


#ifndef RECOG_MESSAGE_POSITION_H
#define RECOG_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace recog
{
template <class ContainerAllocator>
struct Position_
{
  typedef Position_<ContainerAllocator> Type;

  Position_()
    : theta(0.0)
    , alpha(0.0)
    , distance(0.0)  {
    }
  Position_(const ContainerAllocator& _alloc)
    : theta(0.0)
    , alpha(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef double _theta_type;
  _theta_type theta;

   typedef double _alpha_type;
  _alpha_type alpha;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::recog::Position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::recog::Position_<ContainerAllocator> const> ConstPtr;

}; // struct Position_

typedef ::recog::Position_<std::allocator<void> > Position;

typedef boost::shared_ptr< ::recog::Position > PositionPtr;
typedef boost::shared_ptr< ::recog::Position const> PositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::recog::Position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::recog::Position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::recog::Position_<ContainerAllocator1> & lhs, const ::recog::Position_<ContainerAllocator2> & rhs)
{
  return lhs.theta == rhs.theta &&
    lhs.alpha == rhs.alpha &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::recog::Position_<ContainerAllocator1> & lhs, const ::recog::Position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace recog

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::recog::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::recog::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::recog::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::recog::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::recog::Position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::recog::Position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::recog::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81d9e56e69a7c53642d195f1f0bb7a27";
  }

  static const char* value(const ::recog::Position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81d9e56e69a7c536ULL;
  static const uint64_t static_value2 = 0x42d195f1f0bb7a27ULL;
};

template<class ContainerAllocator>
struct DataType< ::recog::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "recog/Position";
  }

  static const char* value(const ::recog::Position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::recog::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 theta\n"
"float64 alpha\n"
"float64 distance\n"
;
  }

  static const char* value(const ::recog::Position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::recog::Position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta);
      stream.next(m.alpha);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::recog::Position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::recog::Position_<ContainerAllocator>& v)
  {
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "alpha: ";
    Printer<double>::stream(s, indent + "  ", v.alpha);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RECOG_MESSAGE_POSITION_H
